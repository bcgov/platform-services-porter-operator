---
# tasks file for TransportServerClaim
- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} dump custom resource variables'
  ansible.builtin.debug:
    msg: 
    - 'Name: {{ ansible_operator_meta.name }}'
    - 'Namespace: {{ ansible_operator_meta.namespace }}'
    - 'ServicePort: {{ service_port }}'
    - 'Monitor: {{ monitor }}'
    verbosity: 0

- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} get port if exists'
  community.kubernetes.k8s_info:
    api_version: cis.f5.com/v1
    kind: TransportServer
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: transport_server

- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }}'
  ansible.builtin.debug:
    var: transport_server
    verbosity: 0

- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} set f5_ingress_port'
  ansible.builtin.set_fact: 
    f5_ingress_port: '{{ transport_server.resources.0.spec.virtualServerPort }}'
  when: transport_server.resources | length != 0

- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} request new port'
  block:
    - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} request port from sidecar'
      ansible.builtin.uri: 
        url: http://localhost:10000/claim
        status_code: 200
      register: new_port_request
      
    - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} request port uri debug'
      ansible.builtin.debug: 
        var: new_port_request
        verbosity: 0

    # new_port_request.json isn't actually json, it's just the key the response goes into..
    - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} set f5_ingress_port'
      ansible.builtin.set_fact: 
        f5_ingress_port: '{{ new_port_request.json }}'
  when: transport_server.resources | length == 0

- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} show f5_ingress_port'
  ansible.builtin.debug: 
    var: f5_ingress_port
    verbosity: 0

- ansible.builtin.set_fact:
    secondary_cluster_enabled: true
    port_count: 1
  when: 
    - secondary_cluster_name is defined
    - secondary_cluster_name != ""

# Using a template due to definition requirements (Can't template integers inline)
# https://github.com/operator-framework/operator-sdk/issues/1701
- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} Primary Cluster TransportServer - {{ state }}'
  vars:
    f5_ingress_ip: '{{ primary_f5_ingress_ip }}'
  community.kubernetes.k8s:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'TransportServer.yaml.j2') }}"

- name: Secondary cluster setup
  when: secondary_cluster_enabled
  block:
  - name: Get Service specs
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Service
      name: "{{ service }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
    register: service_spec

  - name: Set ports count
    set_fact:
      port_count: "{{ service_spec.resources[0].spec.ports | length | int }}"
    when: service_spec.resources[0] is defined and service_spec.resources[0].spec.ports is defined

  - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} Secondary Cluster Endpoint - {{ state }}'
    vars:
      cluster_name: '{{ primary_cluster_name }}'
      f5_ingress_ip: '{{ primary_f5_ingress_ip }}'
    community.kubernetes.k8s:
      api_key: '{{ secondary_cluster_api_key }}'
      host: '{{ secondary_cluster_api_host }}'
      state: '{{ state }}'
      definition: "{{ lookup('template', 'Endpoint.yaml.j2') }}"

  - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} Secondary Cluster Service - {{ state }}'
    vars:
      cluster_name: '{{ primary_cluster_name }}'
    community.kubernetes.k8s:
      api_key: '{{ secondary_cluster_api_key }}'
      host: '{{ secondary_cluster_api_host }}'
      state: '{{ state }}'
      definition: "{{ lookup('template', 'Service.yaml.j2') }}"

  # If the target Service has multiple ports configured, there could be two 
  # TransportServiceClaims pointing to the same Service, but to different ports.
  # In this case, use a separate template that adds the port number to the name.
  # This way, both Services will be created, otherwise they will conflict due to
  # having the same name.
  # We do this in addition to the original Service template in order to maintain
  # backwards compatibility - at least for now.
  # ----------------------------------------------------------------------------
  - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} Secondary Cluster Service - {{ state }}'
    when: port_count | int > 1 
    vars:
      cluster_name: '{{ primary_cluster_name }}'
    community.kubernetes.k8s:
      api_key: '{{ secondary_cluster_api_key }}'
      host: '{{ secondary_cluster_api_host }}'
      state: '{{ state }}'
      definition: "{{ lookup('template', 'ServiceWithPort.yaml.j2') }}"

  # BEGIN SECONDARY CLUSTER COMMS CONFIGURATION
  - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} Secondary Cluster TransportServer - {{ state }}'
    vars:
      f5_ingress_ip: '{{ secondary_f5_ingress_ip }}'
    community.kubernetes.k8s:
      api_key: '{{ secondary_cluster_api_key }}'
      host: '{{ secondary_cluster_api_host }}'
      state: '{{ state }}'
      definition: "{{ lookup('template', 'TransportServer.yaml.j2') }}"

  - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} Primary Cluster Endpoint - {{ state }}'
    vars:
      cluster_name: '{{ secondary_cluster_name }}'
      f5_ingress_ip: '{{ secondary_f5_ingress_ip }}'
    community.kubernetes.k8s:
      state: '{{ state }}'
      definition: "{{ lookup('template', 'Endpoint.yaml.j2') }}"

  - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} Primary Cluster Service - {{ state }}'
    vars:
      cluster_name: '{{ secondary_cluster_name }}'
    community.kubernetes.k8s:
      state: '{{ state }}'
      definition: "{{ lookup('template', 'Service.yaml.j2') }}"

  # As above, create a second Service having the port in the name if the target
  # Service has more than one port configured.
  # ---------------------------------------------------------------------------
  - name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} Primary Cluster Service - {{ state }}'
    when: port_count | int > 1
    vars:
      cluster_name: '{{ secondary_cluster_name }}'
    community.kubernetes.k8s:
      state: '{{ state }}'
      definition: "{{ lookup('template', 'ServiceWithPort.yaml.j2') }}"

# Update .status
- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} status update'
  operator_sdk.util.k8s_status:
    api_version: porter.devops.gov.bc.ca/v1alpha1
    kind: TransportServerClaim
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
    status:
      address: '{{ primary_f5_ingress_ip }}'
      port: '{{ f5_ingress_port }}'
  when: state == 'present'

- name: '[{{ ansible_operator_meta.namespace }}] - {{ ansible_operator_meta.name }} relinquish port from sidecar'
  ansible.builtin.uri: 
    url: "http://localhost:10000/relinquish?port={{ f5_ingress_port }}"
    status_code: 200
  when: state == 'absent'
